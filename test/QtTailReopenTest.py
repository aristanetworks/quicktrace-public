#!/usr/bin/env python3
# Copyright (c) 2020, Arista Networks, Inc.
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:

# 	* Redistributions of source code must retain the above copyright notice,
#  	  this list of conditions and the following disclaimer.
# 	* Redistributions in binary form must reproduce the above copyright notice,
# 	  this list of conditions and the following disclaimer in the documentation
# 	  and/or other materials provided with the distribution.
# 	* Neither the name of Arista Networks nor the names of its contributors may
# 	  be used to endorse or promote products derived from this software without
# 	  specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL ARISTA NETWORKS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

"""Verifies that qttail follows the new log file once it is reopened.
The test opens the logfile initially in the child process, then starts qttail in
the parent process to follow it. After that it opens the log file in the parent
process, thus resetting it. qttail is expected to catch this reset and start emitting
any message that is logged afterwards."""

from __future__ import absolute_import, division, print_function

import os
import subprocess
from QuickTrace import initialize, trace9
from QtTailTest import spawn

# setup
qtfile = "/tmp/qttail_reopen.qt"
pid = os.fork()
if pid == 0:
   # create initial file in child process
   initialize( qtfile )
   trace9( "test message" )
else:
   # reopen test in parent process
   os.wait4( pid, 0 )
   qttail = spawn( "qttail -x %s" % qtfile )
   qttail.expect( "--- opened %s" % qtfile )
   initialize( qtfile ) # reset the existing log file
   msg = "message after reopen"
   trace9( msg )
   qttail.expect( "--- re-opened %s" % qtfile )
   qttail.expect( r'9 \+\d+ "%s"' % msg )
   # qttail fd leak check
   numOpenFiles = 0
   output = subprocess.check_output( [ "lsof", "-p", str( qttail.pid ), "-a",
                                       "-d", "0-1023" ],
                                     stderr=subprocess.STDOUT )
   for line in str( output ).split( "\n" ):
      if qtfile in line:
         numOpenFiles += 1
   assert numOpenFiles == 1
