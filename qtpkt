#!/usr/bin/env python3
# Copyright (c) 2020, Arista Networks, Inc.
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:

# 	* Redistributions of source code must retain the above copyright notice,
#  	  this list of conditions and the following disclaimer.
# 	* Redistributions in binary form must reproduce the above copyright notice,
# 	  this list of conditions and the following disclaimer in the documentation
# 	  and/or other materials provided with the distribution.
# 	* Neither the name of Arista Networks nor the names of its contributors may
# 	  be used to endorse or promote products derived from this software without
# 	  specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL ARISTA NETWORKS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# Use tcpdump to format a packet supplied on the command line
# as a hex string.

from __future__ import absolute_import, division, print_function

import codecs
import struct
import subprocess
import sys
import tempfile

def usage():
   print( "Usage: qtpkt longhexstring" )
   sys.exit( 1 )

if len( sys.argv ) != 2:
   usage()

try:
   decoder = codecs.getdecoder( 'hex_codec' )
   pktData = decoder( sys.argv[ 1 ] )[ 0 ]
except TypeError:
   print( "That did not look like a hex string" )
   usage()

# struct pcap_file_header
# magic, version.version, mbz, mbz, snaplen, DLT_EN10MB
pcap = struct.pack( 'IHHIIII', 0xa1b2c3d4, 2, 4, 0, 0, 65535, 1 )
# struct pcap_sf_pkthdr
# tv_sec, tv_usec, caplen, len
pcap += struct.pack( 'IIII', 0, 0, len( pktData ), len( pktData ) )
pcap += pktData
# Use a temp file.
tempFile = tempfile.NamedTemporaryFile( prefix='qt-pcap-' )
tempFile.write( pcap )
tempFile.flush()
# -t: no timestamp
# -v: verbose
# -e: ethernet too
# -nn: no address or port resolution
subprocess.check_call( [ "tcpdump", "-tvenn", "-r", tempFile.name ] )
